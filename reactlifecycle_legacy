For Component Mounting 

1. constructor(props)

2. componentWillMount() : This method is only called one time, which is before the initial render.
    it is called before render(). You can handle configurations here. You dont have access to 
    DOM and refs here so nothing much that can be done here, Donâ€™t call setStat, use default state instead.
    DON'T cause any side effects
    
3. render : returns jsx based on state/props, compares it to virtual DOM and then touches the DOM as needed.
We shouldn't call setState(), query the Native UI or anything else that can mutate the existing state of the application.

4. componentDidMount: componentDidMount() is the last step in mouting lifecycle phase. you can cause side effects also work with 
DOM nodes and refs


======================= . Updating Lifecycle phases ========

1. componentWillReceiveProps(nextProps) Before our component does anything with the new props, componentWillReceiveProps is called, with the next props as the argument.
   Most Common Use Case: Acting on particular prop changes to trigger state transitions.
   
2. shouldComponentUpdate(nextProps, nextState): returns a boolean, if returned true, render method wont be called

3. componentWillUpdate(nextProps, nextState): componentWillUpdate() is called every time a re-render is required, such as when this.setState() is called
    dont call setState here.

4. render 

5. componentDidUpdate(prevProps, prevState ): Once again, we can access the Native UI stack, interact with our refs and if required start another re-render/update

========= Death/Unmount In-depth======

componentWillUnmount() to unregister any global/system/library events, destroy 3rd party UI library elements, etc. If we don't take the time to remove events we can create memory leaks in our system or leave bad references laying around.

cause side effects (AJAX calls etc.) but dont call setState

